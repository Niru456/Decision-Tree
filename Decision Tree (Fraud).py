# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xS1IJkIHl0DyKL0nvb7c1WIOu29xNP2o
"""

from google.colab import files
uploaded=files.upload()

import pandas as pd
df=pd.read_csv("Fraud_check.csv")
df

# Label encode
from sklearn.preprocessing import LabelEncoder 
LE = LabelEncoder()
df['Undergrad'] = LE.fit_transform(df['Undergrad'])
df['Marital.Status'] = LE.fit_transform(df['Marital.Status'])
df['Urban'] = LE.fit_transform(df['Urban'])

# let's plot pair plot to visualise the attributes all at once
import seaborn as sns
sns.pairplot(data=df,hue ='Taxable.Income')

# Normalization function 
def norm_func(i):
    x = (i-i.min())/(i.max()-i.min())
    return (x)

# Normalized data frame (considering the numerical part of data)
df_norm = norm_func(df.iloc[:,1:])
df_norm.tail(10)

# Declaring features & target
X= df_norm.drop(['Taxable.Income'], axis=1)
Y= df_norm['Taxable.Income']

# Splitting data into train & test
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=10)

##Converting the Taxable income variable to bucketing. 
df_norm["income"]="<=30000"
df_norm.loc[df["Taxable.Income"]>=30000,"income"]="Good"
df_norm.loc[df["Taxable.Income"]<=30000,"income"]="Risky"

# model fitting # 
#from sklearn.tree import DecisionTreeRegressor

from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor(max_depth=5) 
regressor.fit(X_train, Y_train)

print("Node counts:",regressor.tree_.node_count)
print("max depth:",regressor.tree_.max_depth)

Y_pred_train = regressor.predict(X_train) 
Y_pred_test = regressor.predict(X_test) 

from sklearn.metrics import mean_squared_error
Training_err = mean_squared_error(Y_train,Y_pred_train).round(2)
Test_err = mean_squared_error(Y_test,Y_pred_test).round(2)

print("Training_error: ",Training_err.round(2)*100)
print("Test_error: ",Test_err.round(2)*100)

from sklearn import tree
import graphviz 
dot_data = tree.export_graphviz(regressor, out_file=None, 
                    filled=True, rounded=True,  
                    special_characters=False)  
graph = graphviz.Source(dot_data)  
graph